{
  "version": 3,
  "sources": ["../bundle-3MAYc8/checked-fetch.js", "../bundle-3MAYc8/strip-cf-connecting-ip-header.js", "../../../src/semantic_engine.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-3MAYc8/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-3MAYc8/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/michael/Documents/semantic-uncertainty-runtime/.wrangler/tmp/dev-QZ19B2",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// \uD83D\uDD25 Semantic Engine WebAssembly Interface\n// Interfaces with Rust-compiled WASM for \u210F\u209B calculations\n\nexport class SemanticEngine {\n  constructor(wasmModule) {\n    this.wasm = wasmModule;\n  }\n\n  async analyze(prompt, model = 'gpt4') {\n    const startTime = Date.now();\n    \n    try {\n      // Mock sophisticated responses until WASM is ready\n      // In production, this would call: this.wasm.calculate_semantic_uncertainty(prompt, model)\n      const result = this.generateSemanticAnalysis(prompt, model);\n      \n      const processingTime = Date.now() - startTime;\n      \n      return {\n        h_bar: result.h_bar,\n        delta_mu: result.delta_mu,\n        delta_sigma: result.delta_sigma,\n        risk_level: result.risk_level,\n        processing_time: processingTime,\n        edge_location: this.getEdgeLocation()\n      };\n    } catch (error) {\n      console.error('Semantic analysis error:', error);\n      throw new Error('Failed to analyze semantic uncertainty');\n    }\n  }\n\n  async batchAnalyze(prompts, model = 'gpt4') {\n    const startTime = Date.now();\n    const results = [];\n    \n    for (const prompt of prompts) {\n      const analysis = await this.analyze(prompt, model);\n      results.push({\n        prompt: prompt,\n        ...analysis\n      });\n    }\n    \n    const totalTime = Date.now() - startTime;\n    \n    return {\n      results: results,\n      total_prompts: prompts.length,\n      total_time: totalTime,\n      average_h_bar: results.reduce((sum, r) => sum + r.h_bar, 0) / results.length,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  generateSemanticAnalysis(prompt, model) {\n    // Sophisticated mock analysis based on prompt characteristics\n    const promptLength = prompt.length;\n    const complexity = this.calculateComplexity(prompt);\n    const modelFactor = this.getModelFactor(model);\n    \n    // Calculate semantic uncertainty components\n    const delta_mu = this.calculatePrecision(prompt, complexity, modelFactor);\n    const delta_sigma = this.calculateFlexibility(prompt, complexity, modelFactor);\n    const h_bar = Math.sqrt(delta_mu * delta_sigma);\n    \n    // Determine risk level\n    let risk_level;\n    if (h_bar < 1.0) {\n      risk_level = 'high_collapse_risk';\n    } else if (h_bar < 1.2) {\n      risk_level = 'moderate_instability';\n    } else {\n      risk_level = 'stable';\n    }\n    \n    return {\n      h_bar: parseFloat(h_bar.toFixed(4)),\n      delta_mu: parseFloat(delta_mu.toFixed(4)),\n      delta_sigma: parseFloat(delta_sigma.toFixed(4)),\n      risk_level: risk_level\n    };\n  }\n\n  calculateComplexity(prompt) {\n    // Analyze prompt complexity\n    const words = prompt.split(/\\s+/).length;\n    const sentences = prompt.split(/[.!?]+/).length;\n    const questions = (prompt.match(/\\?/g) || []).length;\n    const imperatives = (prompt.match(/\\b(write|create|generate|explain|describe|analyze)\\b/gi) || []).length;\n    \n    return {\n      word_count: words,\n      sentence_count: sentences,\n      question_density: questions / sentences,\n      imperative_density: imperatives / sentences,\n      overall_complexity: (words * 0.1) + (sentences * 0.2) + (questions * 0.3) + (imperatives * 0.4)\n    };\n  }\n\n  getModelFactor(model) {\n    const factors = {\n      'gpt4': 0.85,\n      'claude3': 0.82,\n      'gemini': 0.78,\n      'mistral': 0.75,\n      'grok3': 0.80,\n      'openai_o3': 0.90\n    };\n    return factors[model] || 0.75;\n  }\n\n  calculatePrecision(prompt, complexity, modelFactor) {\n    // \u0394\u03BC calculation - precision measurement\n    const baseVariation = 0.1 + (complexity.overall_complexity * 0.02);\n    const modelAdjustment = 1 - modelFactor;\n    const lengthFactor = Math.min(prompt.length / 1000, 1.0);\n    \n    return baseVariation + modelAdjustment + (lengthFactor * 0.1);\n  }\n\n  calculateFlexibility(prompt, complexity, modelFactor) {\n    // \u0394\u03C3 calculation - flexibility measurement\n    const baseFlexibility = 0.8 + (complexity.question_density * 0.3);\n    const creativityBoost = complexity.imperative_density * 0.2;\n    const modelStability = modelFactor;\n    \n    return baseFlexibility + creativityBoost + (1 - modelStability);\n  }\n\n  getEdgeLocation() {\n    // In a real Worker, this would use the CF object\n    return 'global-edge';\n  }\n}\n\n// WebAssembly initialization helper\nexport async function initializeWasm(wasmModule) {\n  try {\n    // Initialize the WebAssembly module\n    // const instance = await WebAssembly.instantiate(wasmModule);\n    // return instance.exports;\n    \n    // For now, return a mock interface\n    return {\n      calculate_semantic_uncertainty: (prompt, model) => {\n        // This would be the actual WASM function call\n        return { h_bar: 1.234, delta_mu: 0.567, delta_sigma: 0.890 };\n      }\n    };\n  } catch (error) {\n    console.error('WASM initialization error:', error);\n    throw new Error('Failed to initialize semantic engine');\n  }\n} ", "// \uD83D\uDD25 Semantic Uncertainty API - Cloudflare Workers\n// Ultra-fast edge computing for \u210F\u209B calculations\n\nimport { SemanticEngine } from './semantic_engine.js';\n\n// Rate limiter using Durable Objects\nexport class RateLimiter {\n  constructor(state, env) {\n    this.state = state;\n    this.env = env;\n  }\n\n  async fetch(request) {\n    const ip = request.headers.get('CF-Connecting-IP');\n    const key = `rate_limit:${ip}`;\n    \n    // Get current count\n    const current = await this.state.storage.get(key) || 0;\n    const limit = parseInt(this.env.RATE_LIMIT_PER_MINUTE) || 100;\n    \n    if (current >= limit) {\n      return new Response(JSON.stringify({\n        error: 'Rate limit exceeded',\n        limit: limit,\n        reset_in: 60\n      }), {\n        status: 429,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Increment counter\n    await this.state.storage.put(key, current + 1, { expirationTtl: 60 });\n    \n    return new Response(JSON.stringify({ allowed: true }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Main Worker handler\nexport default {\n  async fetch(request, env, ctx) {\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': env.ALLOWED_ORIGINS || '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-API-Key',\n      'Access-Control-Max-Age': '86400',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    try {\n      const url = new URL(request.url);\n      const path = url.pathname;\n\n      // Health check\n      if (path === '/health') {\n        return new Response(JSON.stringify({\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          version: '1.0.0',\n          engine: 'semantic-uncertainty-cloudflare'\n        }), {\n          headers: { \n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      // API authentication\n      const apiKey = request.headers.get('X-API-Key') || \n                    request.headers.get('Authorization')?.replace('Bearer ', '');\n      \n      if (!apiKey || apiKey !== env.API_KEY_SECRET) {\n        return new Response(JSON.stringify({\n          error: 'Unauthorized',\n          message: 'Valid API key required'\n        }), {\n          status: 401,\n          headers: { \n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      // Rate limiting (disabled for now - would use Durable Objects)\n      // const rateLimitResponse = await env.RATE_LIMITER.fetch(request);\n      // const rateLimitData = await rateLimitResponse.json();\n      // \n      // if (!rateLimitData.allowed) {\n      //   return new Response(JSON.stringify(rateLimitData), {\n      //     status: 429,\n      //     headers: { \n      //       'Content-Type': 'application/json',\n      //       ...corsHeaders\n      //     }\n      //   });\n      // }\n\n      // Semantic uncertainty analysis\n      if (path === '/api/v1/analyze' && request.method === 'POST') {\n        const body = await request.json();\n        const { prompt, model = 'gpt4' } = body;\n\n        if (!prompt) {\n          return new Response(JSON.stringify({\n            error: 'Bad Request',\n            message: 'Prompt is required'\n          }), {\n            status: 400,\n            headers: { \n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        // Initialize semantic engine (mock for now - would use WebAssembly)\n        const engine = new SemanticEngine(null);\n        \n        // Calculate semantic uncertainty\n        const result = await engine.analyze(prompt, model);\n        \n        // Track usage (disabled for now - would use KV storage)\n        // await trackUsage(env.USAGE_TRACKER, apiKey, 'analyze', result.processing_time);\n\n        return new Response(JSON.stringify({\n          success: true,\n          data: {\n            prompt: prompt,\n            model: model,\n            semantic_uncertainty: result.h_bar,\n            precision: result.delta_mu,\n            flexibility: result.delta_sigma,\n            risk_level: result.risk_level,\n            processing_time: result.processing_time,\n            timestamp: new Date().toISOString()\n          }\n        }), {\n          headers: { \n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      // Batch analysis\n      if (path === '/api/v1/batch' && request.method === 'POST') {\n        const body = await request.json();\n        const { prompts, model = 'gpt4' } = body;\n\n        if (!prompts || !Array.isArray(prompts)) {\n          return new Response(JSON.stringify({\n            error: 'Bad Request',\n            message: 'Prompts array is required'\n          }), {\n            status: 400,\n            headers: { \n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n\n        const engine = new SemanticEngine(null);\n        const results = await engine.batchAnalyze(prompts, model);\n        \n        // Track batch usage (disabled for now - would use KV storage)\n        // await trackUsage(env.USAGE_TRACKER, apiKey, 'batch', results.total_time);\n\n        return new Response(JSON.stringify({\n          success: true,\n          data: results\n        }), {\n          headers: { \n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      // Default 404\n      return new Response(JSON.stringify({\n        error: 'Not Found',\n        message: 'Endpoint not found'\n      }), {\n        status: 404,\n        headers: { \n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n\n    } catch (error) {\n      console.error('Worker error:', error);\n      \n      return new Response(JSON.stringify({\n        error: 'Internal Server Error',\n        message: 'Something went wrong'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  }\n};\n\n// Usage tracking function\nasync function trackUsage(kv, apiKey, endpoint, processingTime) {\n  const date = new Date().toISOString().split('T')[0];\n  const key = `usage:${apiKey}:${date}`;\n  \n  try {\n    const existing = await kv.get(key, 'json') || { calls: 0, total_time: 0 };\n    existing.calls += 1;\n    existing.total_time += processingTime;\n    \n    await kv.put(key, JSON.stringify(existing), { expirationTtl: 86400 * 30 }); // 30 days\n  } catch (error) {\n    console.error('Usage tracking error:', error);\n  }\n} ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/michael/Documents/semantic-uncertainty-runtime/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/michael/Documents/semantic-uncertainty-runtime/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/michael/Documents/semantic-uncertainty-runtime/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/michael/Documents/semantic-uncertainty-runtime/src/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/michael/Documents/semantic-uncertainty-runtime/.wrangler/tmp/bundle-3MAYc8/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/michael/Documents/semantic-uncertainty-runtime/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/michael/Documents/semantic-uncertainty-runtime/.wrangler/tmp/bundle-3MAYc8/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/michael/Documents/semantic-uncertainty-runtime/.wrangler/tmp/bundle-3MAYc8/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
